#include <GL/gl.h>
#include <GL/glut.h>
void display(void)
{
/* clear all pixels */
glClear (GL_COLOR_BUFFER_BIT);
/* draw white polygon (rectangle) with corners at
* (0.25, 0.25, 0.0) and (0.75, 0.75, 0.0)
*/

/* Main Area*/
glColor3f(0.0f,0.60,1.0f);
glBegin(GL_POLYGON);
glVertex3f (0.10, 0.10, 0.0);
glVertex3f (0.90, 0.10, 0.0);
glVertex3f (0.90, 0.90, 0.0);
glVertex3f (0.10, 0.90, 0.0);
glEnd();

/* Middle Wall*/
glColor3f (0.80, 0.60, 1.0);
glBegin(GL_POLYGON);
glVertex3f (0.30, 0.30, 0.0);
glVertex3f (0.70, 0.30, 0.0);
glVertex3f (0.70, 0.70, 0.0);
glVertex3f (0.30, 0.70, 0.0);
glEnd();

/* Flor */
glColor3f(1.0f,0.70,0.90);
glBegin(GL_POLYGON);
glVertex3f (0.10, 0.10, 0.0);
glVertex3f (0.90, 0.10, 0.0);
glVertex3f (0.70, 0.30, 0.0);
glVertex3f (0.30, 0.30, 0.0);
glEnd();

/* Left Wall*/
glColor3f (0.80, 0.70, 1.0);
glBegin(GL_POLYGON);
glVertex3f (0.10, 0.10, 0.0);
glVertex3f (0.30, 0.30, 0.0);
glVertex3f (0.30, 0.70, 0.0);
glVertex3f (0.10, 0.90, 0.0);
glEnd();

/* Right Wall*/
glColor3f (0.80, 0.70, 1.0);
glBegin(GL_POLYGON);
glVertex3f (0.70, 0.30, 0.0);
glVertex3f (0.90, 0.10, 0.0);
glVertex3f (0.90, 0.90, 0.0);
glVertex3f (0.70, 0.70, 0.0);
glEnd();

/* Border Start Top*/
glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (0.10, 0.87, 0.0);
glVertex3f (0.30, 0.68, 0.0);
glVertex3f (0.30, 0.70, 0.0);
glVertex3f (0.10, 0.90, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (0.30, 0.68, 0.0);
glVertex3f (0.70, 0.68, 0.0);
glVertex3f (0.70, 0.70, 0.0);
glVertex3f (0.30, 0.70, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (0.70, 0.68, 0.0);
glVertex3f (0.90, 0.87, 0.0);
glVertex3f (0.90, 0.90, 0.0);
glVertex3f (0.70, 0.70, 0.0);
glEnd();

/* Border Start Top End*/

/* Border Start down Start*/

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (0.10, 0.10, 0.0);
glVertex3f (0.30, 0.30, 0.0);
glVertex3f (0.30, 0.33, 0.0);
glVertex3f (0.10, 0.18, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (0.30, 0.30, 0.0);
glVertex3f (0.70, 0.30, 0.0);
glVertex3f (0.70, 0.33, 0.0);
glVertex3f (0.30, 0.33, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (0.70, 0.30, 0.0);
glVertex3f (0.90, 0.10, 0.0);
glVertex3f (0.90, 0.18, 0.0);
glVertex3f (0.70, 0.33, 0.0);
glEnd();

/* Border Start down End*/
/* Table Start  Start*/

glColor3f (1.0, 1.0, 0.0);
glBegin(GL_POLYGON);
glVertex3f (0.44, 0.38, 0.0);
glVertex3f (0.56, 0.38, 0.0);
glVertex3f (0.56, 0.39, 0.0);
glVertex3f (0.44, 0.39, 0.0);
glEnd();

glColor3f (0.5, 0.5, 0.5);
glBegin(GL_POLYGON);
glVertex3f (0.44, 0.39, 0.0);
glVertex3f (0.56, 0.39, 0.0);
glVertex3f (0.57, 0.43, 0.0);
glVertex3f (0.46, 0.43, 0.0);
glEnd();

/* Table  leg 1  Start*/
glColor3f (1.0, 1.0, 0.0);
glBegin(GL_POLYGON);
glVertex3f (0.46, 0.30, 0.0);
glVertex3f (0.47, 0.30, 0.0);
glVertex3f (0.47, 0.38, 0.0);
glVertex3f (0.46, 0.38, 0.0);
glEnd();

/* table  leg 2  Start*/
glColor3f (1.0, 1.0, 0.0);
glBegin(GL_POLYGON);
glVertex3f (0.53, 0.30, 0.0);
glVertex3f (0.54, 0.30, 0.0);
glVertex3f (0.54, 0.38, 0.0);
glVertex3f (0.53, 0.38, 0.0);
glEnd();

/* TV  stand  Start*/
glColor3f (0.0, 0.0, 0.0);
glBegin(GL_POLYGON);
glVertex3f (0.47, 0.39, 0.0);
glVertex3f (0.53, 0.39, 0.0);
glVertex3f (0.53, 0.40, 0.0);
glVertex3f (0.47, 0.40, 0.0);
glEnd();

/* TV  Start*/
glColor3f (0.0, 0.0, 0.0);
glBegin(GL_POLYGON);
glVertex3f (0.45, 0.40, 0.0);
glVertex3f (0.55, 0.40, 0.0);
glVertex3f (0.55, 0.50, 0.0);
glVertex3f (0.45, 0.50, 0.0);
glEnd();

/* TV screen Start*/
glColor3f (0.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (0.46, 0.41, 0.0);
glVertex3f (0.54, 0.41, 0.0);
glVertex3f (0.54, 0.49, 0.0);
glVertex3f (0.46, 0.49, 0.0);
glEnd();


/*Bed Main Start*/
glColor3f(1.0, 0.40, 1.0);
glBegin(GL_POLYGON);
glVertex3f (0.13, 0.20, 0.0);
glVertex3f (0.28, 0.19, 0.0);
glVertex3f (0.40, 0.33, 0.0);
glVertex3f (0.30, 0.33, 0.0);
glEnd();

/*Bed side Start*/
glColor3f (0.5, 0.5, 0.5);
glBegin(GL_POLYGON);
glVertex3f (0.28, 0.19, 0.0);
glVertex3f (0.28, 0.18, 0.0);
glVertex3f (0.41, 0.33, 0.0);
glVertex3f (0.40, 0.33, 0.0);
glEnd();

/*Bed side 2 Start*/
glColor3f (0.5, 0.5, 0.5);
glBegin(GL_POLYGON);
glVertex3f (0.13, 0.19, 0.0);
glVertex3f (0.28, 0.18, 0.0);
glVertex3f (0.28, 0.19, 0.0);
glVertex3f (0.13, 0.20, 0.0);
glEnd();

/*Bed leg 1 Start*/
glColor3f (0.5, 0.5, 0.5);
glBegin(GL_POLYGON);
glVertex3f (0.14, 0.19, 0.0);
glVertex3f (0.14, 0.14, 0.0);
glVertex3f (0.15, 0.14, 0.0);
glVertex3f (0.15, 0.19, 0.0);
glEnd();

/*Bed leg 2 Start*/
glColor3f (0.5, 0.5, 0.5);
glBegin(GL_POLYGON);
glVertex3f (0.26, 0.19, 0.0);
glVertex3f (0.26, 0.14, 0.0);
glVertex3f (0.27, 0.14, 0.0);
glVertex3f (0.27, 0.19, 0.0);
glEnd();

/*Bed leg 3 Start*/
glColor3f (0.5, 0.5, 0.5);
glBegin(GL_POLYGON);
glVertex3f (0.39, 0.31, 0.0);
glVertex3f (0.39, 0.30, 0.0);
glVertex3f (0.40, 0.30, 0.0);
glVertex3f (0.40, 0.32, 0.0);
glEnd();



/* Window Start*/
glColor3f (0.5, 0.5, 0.5);
glBegin(GL_POLYGON);
glVertex3f (0.76, 0.46, 0.0);
glVertex3f (0.85, 0.45, 0.0);
glVertex3f (0.85, 0.58, 0.0);
glVertex3f (0.76, 0.56, 0.0);
glEnd();

glColor3f(0.0f,1.80,0.60);
glBegin(GL_POLYGON);
glVertex3f (0.77, 0.47, 0.0);
glVertex3f (0.85, 0.46, 0.0);
glVertex3f (0.85, 0.57, 0.0);
glVertex3f (0.77, 0.55, 0.0);
glEnd();
/* Window Start End*/

/* don't wait!
* start processing buffered OpenGL routines
*/
glFlush ();
}
void init (void)
{
/* select clearing (background) color */
glClearColor (0.0, 0.0, 0.0, 0.0);
/* initialize viewing values */
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
glOrtho(0.0, 1.0, 0.0, 1.0, -1.0, 1.0);
}
/*
* Declare initial window size, position, and display mode
* (single buffer and RGBA). Open window with "hello"
* in its title bar. Call initialization routines.
* Register callback function to display graphics.
* Enter main loop and process events.
*/
int main(int argc, char** argv)
{
glutInit(&argc, argv);
glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize (800, 800);
glutInitWindowPosition (100, 100);
glutCreateWindow ("hello");
init ();
glutDisplayFunc(display);
glutMainLoop();
return 0; /* ISO C requires main to return int. */
}
